Author: Brian Gianforcaro ( bjg1955@rit.edu )
Assignment: Homework #3-1


  Here is the cluster parallel version of Floyd's Algorithm for computing all
  shortest paths in an n-vertex graph whos distance matrix is d, and n-by-n
  matrix. Each element in d is a Java double-precision floating-point number.
  The version uses the scatter-gather pattern rather than the parallel
  input/output files pattern. The sequential version of Floyd's Algorithm is
  the same, without the communication operations. 

  1 Scatter row slices of D from process 0 to each process
  2 For i in 0 .. N-1
  3     Broadcast row i of D to all processes
  4     For r in this process's subrange of 0 .. N-1
  5         For c in 0 .. N-1 
  6             D[r,c] = min ( D[r,c], D[r,i] + D[i,c] )
  7 Gather row slices of D from each process into process 0

  d is divided into equal-sized row slices. Measurements show that 
  executing the statement on line 6 takes 0.01 microseconds. Also, measurements
  show that sending a message from one process to another takes (200 + 0.01B) ms,
  where B is the number of bits of data in the message.


    Exercise 21 (p. 574):
    ---------------------
    Give an expression for the running time T1 in microseconds of the
    sequential version of Floyd's Algorithm as a function of n, the number
    of node. Ignore the loop overhead time.

       Sequential Algorithm:
       ---------------------
       1 For i in 0 .. N-1
       2     For r in  0 .. N-1
       3         For c in 0 .. N-1 
       4             D[r,c] = min ( D[r,c], D[r,i] + D[i,c] )

       Results in a O(n^3) algorithm.
       Since we know line 5 takes 0.01 microseconds we know our final expression:

       T1(n) = (n^3)*0.01


    Exercise 22 (p. 574):
    ---------------------
    Give an expression for the time T2 in microseconds needed to send all the
    messages for the scatter operation on line 1 as a function of n, the number
    of nodes, and K, he number of parallel processes. 


     Known:
      - A java double is known to be of size: 64bits
      - The total # of bits going to every node will be:

        ( 64 bits * (( n by n grid ) / split into K sections )

      - We have the static overhead for every transmission: 200 ms
      - We have the dynamic overhead for every bit being sent: 0.01 ms

      Combined we have our final equation:

      T2(n,K) = (K*(200 + 0.01(64*((n^2)/K)))) 


    Exercise 23 (p. 574):
    ---------------------
    Give an expression for the time T3 in microseconds needed to send all the 
    messages for the broadcast operation on line 3 as a function of n, the
    number of nodes, and K, the number of parallel processes. 

     Known:
      - A Java double is known to be of size: 64bits
      - Each row consists of n java doubles.
      - A row is sent to all other processes.

     T3(n,K) = (K*(200 + 0.01(64*n))) 

    Exercise 24 (p. 574):
    ---------------------
    Give an expression for the running time T4 in microseconds of the cluster
    parallel version of Floyd's Algorithm as a function of n, the number of 
    nodes, and K, the number of parallel processes. Ignore the loop overhead
    time.


      line 1: T2(n,K)+
      line 2: n*(
      line 3:      T3(n,k)  +
      line 4:                  ( n/k *
      line 5:                          ( n *
      line 6:                                0.01)))
      line 7: + T2( n, K)

      Note: Gather is the same equation as scatter.


      T4( n, K ) = T2(n,K) + (n*( T3(n,K) + ((n/K)*(n*0.01)))) + T2(n,K)


    Exercise 25 (p. 574):
    ---------------------
    How many parallel processes should be used to obtain the smallest running
    time for a 1,000-vertex graph?
    (Note that the number of parallel processes must be an integer)

      If we compute the possible K's using T4(n,K) with a n of 1000
      and a few possible K's we can get an idea of the optimal solution.

            K | runtime in ms
           -------------------
            1 | 12120400.0
            2 |  7960800.0
        ->  3 |  7134533.3
            4 |  7141600.0
            5 |  7482000.0
            6 |  7989066.6
            7 |  8591371.4
            9 |  9253200.0
           10 |  9954711.1
           11 | 10684000.0

      Our data table leads us to a K of 3 being the
      optimal amount of processors to obtain the smallest
      running time.

    Exercise 26 (p. 574):
    ---------------------
    What is the largest speedup that can be obtained for a 1000-vertex graph.

              Experimentally determined sequential fraction:

                       K * T(N,K) - T(N,1)
                  F = ---------------------
                       K * T(N,1) - T(N,1) 


                       3 * T4(1000,3) - T1(1000)
                  F = --------------------------
                       3 * T1(1000) - T1(1000) 


                       3 * 7134533.3 - 10000000.0
                  F = ----------------------------  = 0.5701
                       3 * 10000000.0 - 10000000.0

                                1
             MaxSpeedup(N,K) = ---
                                F

             MaxSpeedup(1000,3) =  1.75

