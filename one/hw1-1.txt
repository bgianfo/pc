Author: Brian Gianforcaro ( bjg1955@rit.edu )
Assignment: Homework #1

Part 1a:

          1)  2305843009213694207 2)  2305843009213694257
          3)  2305843009213694317 4)  2305843009213694323
          5)  2305843009213694381 6)  2305843009213694411
          7)  2305843009213694429 8)  2305843009213694443

               ------------------------------------
               | K   | T (msec) | Speedup |  Eff  |
               ------------------------------------
               | Seq |  405,010 |  XXXXX  | XXXXX |
               ------------------------------------
               |  8  |  51,014  |  7.939  | 0.992 |
               ------------------------------------

      Explain why this set of integers leads to high efficiency:

        All of the numbers chosen were known primes, each individual
        prime takes significant computation to prove that it is prime. 

        Since each prime takes a significant amount of computation,
        with very little memory use, the problem scaled very well 
        when parallelized.

Part 1b:

          1)  2305843009213693952 2)  2305843009213693953
          3)  2305843009213693954 4)  2305843009213693955
          5)  2305843009213693956 6)  2305843009213693957
          7)  2305843009213693958 8)  2305843009213694443

               ------------------------------------
               | K   | T (msec) | Speedup |  Eff  |
               ------------------------------------
               | Seq |   54571  | XXXXXXX | XXXXX |
               ------------------------------------
               |  8  |   54614  | 0.99921 | 0.124 |
               ------------------------------------

      Explain why this set of integers leads to low efficiency:

        All of the numbers chosen were known to be non-primes except for the
        last one, each non-prime can be proven non-prime almost instantaneously
        only the last prime requires significant computation to prove that it
        is prime. 

        Since each non-prime takes almost no computation to finish, the
        overhead of setting up the threads in Parallel Java seems to
        take more time than the actual computation done by that thread.
        This leaves us with a sequential runtime faster than the parallel.

